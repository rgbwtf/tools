// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  printers Printer[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  permissions PERMISSIONS @default(USER)

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Printer {
  id    String @id @default(uuid())
  title String

  imageId  String? @unique
  imageUrl String? @db.Text

  displaySignature Boolean @default(false)

  cartridges Cartridge[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String
  user       User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Cartridge {
  id String @id @default(uuid())

  printerId String?  @unique
  printer   Printer? @relation(fields: [printerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  layers    Layer[]

  @@index([printerId])
}

model Layer {
  id String @id @default(uuid())

  value   Int?
  channel String?

  imageId  String @unique
  imageUrl String @db.Text

  uploadStatus UploadStatus @default(PENDING)

  cartridgeId String?
  cartridge   Cartridge? @relation(fields: [cartridgeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartridgeId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum PERMISSIONS {
  ADMIN
  USER
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  PRINTER
  CARTRIDGE
  LAYER
}

model AuditLog {
  id          String      @id @default(uuid())
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
